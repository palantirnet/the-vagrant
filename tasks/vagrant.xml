<?xml version="1.0"?>
<project name="Vagrant" default="install">
    <!--
        This can be used to install our current vagrant machine and provisioning
        in a project.
      -->

    <basename property="default.projectname" file="${application.startdir}" suffix="local" />
    <property name="default.project_web_root" value="web" />
    <property name="default.enable_solr" value="Y" />
    <property name="default.enable_https" value="Y" />
    <property name="default.node_version" value="8" />
    <property name="default.custom_playbook" value="n" />


    <!-- Target: install -->
    <target name="install" description="Install the vagrantfile and provisioning into your project.">
        <!-- Interactive prompts -->
        <propertyprompt propertyName="projectname" defaultValue="${default.projectname}" promptText="Enter a short name for your project" promptCharacter=":" useExistingValue="true"/>
        <propertyprompt propertyName="project_web_root" defaultValue="${default.project_web_root}" promptText="Web root within your project" promptCharacter=":" useExistingValue="true"/>
        <input propertyName="enable_solr" message="Enable Solr " promptChar="?" validArgs="Y,n" defaultValue="${default.enable_solr}" />
        <input propertyName="enable_https" message="Enable HTTPS " promptChar="?" validArgs="Y,n" defaultValue="${default.enable_https}" />
        <propertyprompt propertyName="node_version" defaultValue="${default.node_version}" promptText="Node version" promptCharacter=":" useExistingValue="true"/>
        <input propertyName="custom_playbook" message="Add a custom Ansible playbook to your project  " promptChar="?" validArgs="Y,n" defaultValue="${default.custom_playbook}" />

        <!-- Source locations -->
        <property name="vagrant.installdir" value="${application.startdir}"/>
        <property name="vagrant.ansible.source" value="${phing.dir.vagrant}/../conf/vagrant/provisioning"/>
        <property name="vagrant.ansible_template.source" value="${phing.dir.vagrant}/../conf/vagrant/provisioning-template"/>
        <property name="vagrant.vagrantfile.source" value="${phing.dir.vagrant}/../conf/vagrant/Vagrantfile"/>
        <property name="vagrant.vagrantfile.dest" value="${vagrant.installdir}/Vagrantfile"/>

        <!-- Install based on interactive prompt responses above -->
        <if>
            <equals arg1="${custom_playbook}" arg2="Y"/>
            <then>
                <!-- Additional custom playbook -->
                <property name="ansible_custom_playbook" value="provisioning/${projectname}.yml" />
                <copy todir="${vagrant.installdir}/provisioning">
                    <fileset dir="${vagrant.ansible_template.source}"/>
                </copy>
                <move file="${vagrant.installdir}/provisioning/project.yml" tofile="${vagrant.installdir}/provisioning/${projectname}.yml"/>
            </then>
            <else>
                <property name="ansible_custom_playbook" value="" />
            </else>
        </if>

        <if>
            <equals arg1="${enable_solr}" arg2="Y"/>
            <then>
                <!-- Workaround for phing <property>, which casts "true" to a
                     boolean. We want to be able to write the string "true" to
                     the Vagrantfile. -->
                <exec command="echo 'true'" outputProperty="ansible_solr_enabled" />
            </then>
            <else>
                <!-- Workaround for phing <property> casting. -->
                <exec command="echo 'false'" outputProperty="ansible_solr_enabled" />
            </else>
        </if>

        <if>
            <equals arg1="${enable_https}" arg2="Y"/>
            <then>
                <!-- Workaround for phing <property>, which casts "true" to a
                     boolean. We want to be able to write the string "true" to
                     the Vagrantfile. -->
                <exec command="echo 'true'" outputProperty="ansible_https_enabled" />
            </then>
            <else>
                <!-- Workaround for phing <property> casting. -->
                <exec command="echo 'false'" outputProperty="ansible_https_enabled" />
            </else>
        </if>

        <copy file="${vagrant.vagrantfile.source}" tofile="${vagrant.vagrantfile.dest}" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="projectname" value="${projectname}"/>
                    <token key="playbook" value="vendor/palantirnet/the-vagrant/conf/vagrant/provisioning/drupal8-skeleton.yml"/>
                    <token key="ansible_solr_enabled" value="${ansible_solr_enabled}"/>
                    <token key="ansible_https_enabled" value="${ansible_https_enabled}"/>
                    <token key="ansible_node_version" value="${node_version}"/>
                    <token key="ansible_project_web_root" value="${project_web_root}"/>
                    <token key="ansible_custom_playbook" value="${ansible_custom_playbook}"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>


    <target name="remove" description="Remove the vagrantfile and provisioning from your project.">
        <propertyprompt propertyName="delete" promptText="Are you sure you want to delete the Vagrantfile and any local provisioning? You may want to `vagrant destroy` first." promptCharacter="y/N :" useExistingValue="true"/>

        <property name="vagrant.installdir" value="${application.startdir}"/>

        <if>
            <equals arg1="${delete}" arg2="y"/>
            <then>
                <delete file="${vagrant.installdir}/Vagrantfile"/>
                <delete dir="${vagrant.installdir}/provisioning"/>
            </then>
            <else>
                <echo>Ok, nevermind.</echo>
            </else>
        </if>
    </target>

</project>
